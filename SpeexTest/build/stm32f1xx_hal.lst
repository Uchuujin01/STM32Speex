ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.uwTick,"aw",%nobits
  20              		.align	2
  23              	uwTick:
  24 0000 00000000 		.space	4
  25              		.section	.text.HAL_Init,"ax",%progbits
  26              		.align	2
  27              		.global	HAL_Init
  28              		.thumb
  29              		.thumb_func
  31              	HAL_Init:
  32              	.LFB64:
  33              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @file    stm32f1xx_hal.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @version V1.0.4
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @date    29-April-2016
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief   HAL module driver.
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *          This is the common part of the HAL initialization
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   @verbatim
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ==============================================================================
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                      ##### How to use this driver #####
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ==============================================================================
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     [..]
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL. 
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     [..]
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     The HAL contains two APIs' categories: 
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****          (+) Common HAL APIs
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****          (+) Services HAL APIs
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   @endverbatim
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ******************************************************************************
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @attention
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 2


  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * are permitted provided that the following conditions are met:
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      this list of conditions and the following disclaimer.
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      and/or other materials provided with the distribution.
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      without specific prior written permission.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ******************************************************************************
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #include "stm32f1xx_hal.h"
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @addtogroup STM32F1xx_HAL_Driver
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL HAL
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief HAL module driver.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #ifdef HAL_MODULE_ENABLED
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private define ------------------------------------------------------------*/
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Private_Constants HAL Private Constants
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  * @brief STM32F1xx HAL Driver version number
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    */
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_MAIN   (0x01) /*!< [31:24] main version */
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_SUB1   (0x00) /*!< [23:16] sub1 version */
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_SUB2   (0x04) /*!< [15:8]  sub2 version */
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_RC     (0x00) /*!< [7:0]  release candidate */
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION         ((__STM32F1xx_HAL_VERSION_MAIN << 24)\
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_SUB1 << 16)\
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_SUB2 << 8 )\
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_RC))
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 3


  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @}
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private macro -------------------------------------------------------------*/
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private variables ---------------------------------------------------------*/
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Private_Variables HAL Private Variables
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** static __IO uint32_t uwTick;
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @}
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Exported functions ---------------------------------------------------------*/
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions HAL Exported Functions
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  *  @brief    Initialization and de-initialization functions
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  *
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** @verbatim
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  ===============================================================================
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****               ##### Initialization and de-initialization functions #####
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  ===============================================================================
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    [..]  This section provides functions allowing to:
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Initializes the Flash interface, the NVIC allocation and initial clock 
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****           configuration. It initializes the source of time base also when timeout 
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****           is needed and the backup domain when enabled.
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) de-Initializes common part of the HAL.
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated 
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****           Tick interrupt priority. 
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****         (++) Systick timer is used by default as source of time base, but user 
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              can eventually implement his proper time base source (a general purpose 
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              timer for example or other time source), keeping in mind that Time base 
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              handled in milliseconds basis.
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically 
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time 
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig(). 
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular 
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a 
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority 
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller 
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****             ISR process will be blocked. 
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****        (++) functions affecting time base configurations are declared as __Weak  
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 4


 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** @endverbatim
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function configures the Flash prefetch, 
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        Configures time base source, NVIC and Low level hardware
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is called at the beginning of program after reset and before 
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       the clock configuration
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note The time base configuration is based on MSI clock when exiting from Reset.
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Once done, time base tick start incrementing.
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        In the default implementation,Systick is used as source of time base.
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       The tick variable is incremented each 1ms in its ISR.
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval HAL status
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
  34              		.loc 1 158 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 00AF     		add	r7, sp, #0
  44              	.LCFI1:
  45              		.cfi_def_cfa_register 7
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Configure Flash prefetch */
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #if (PREFETCH_ENABLE != 0)
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #if defined(STM32F101x6) || defined(STM32F101xB) || defined(STM32F101xE) || defined(STM32F101xG) ||
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     defined(STM32F102x6) || defined(STM32F102xB) || \
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) ||
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     defined(STM32F105xC) || defined(STM32F107xC)
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Prefetch buffer is not available on value line devices */
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
  46              		.loc 1 167 0
  47 0004 084A     		ldr	r2, .L3
  48 0006 084B     		ldr	r3, .L3
  49 0008 1B68     		ldr	r3, [r3]
  50 000a 43F01003 		orr	r3, r3, #16
  51 000e 1360     		str	r3, [r2]
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #endif
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #endif /* PREFETCH_ENABLE */
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Set Interrupt Group Priority */
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
  52              		.loc 1 172 0
  53 0010 0320     		movs	r0, #3
  54 0012 FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
  55              		.loc 1 175 0
  56 0016 0020     		movs	r0, #0
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 5


  57 0018 FFF7FEFF 		bl	HAL_InitTick
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Init the low level hardware */
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_MspInit();
  58              		.loc 1 178 0
  59 001c FFF7FEFF 		bl	HAL_MspInit
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Return function status */
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return HAL_OK;
  60              		.loc 1 181 0
  61 0020 0023     		movs	r3, #0
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
  62              		.loc 1 182 0
  63 0022 1846     		mov	r0, r3
  64 0024 80BD     		pop	{r7, pc}
  65              	.L4:
  66 0026 00BF     		.align	2
  67              	.L3:
  68 0028 00200240 		.word	1073881088
  69              		.cfi_endproc
  70              	.LFE64:
  72              		.section	.text.HAL_DeInit,"ax",%progbits
  73              		.align	2
  74              		.global	HAL_DeInit
  75              		.thumb
  76              		.thumb_func
  78              	HAL_DeInit:
  79              	.LFB65:
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function de-Initializes common part of the HAL and stops the source
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        of time base.
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is optional.
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval HAL status
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
  80              		.loc 1 191 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
  85              	.LCFI2:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 00AF     		add	r7, sp, #0
  90              	.LCFI3:
  91              		.cfi_def_cfa_register 7
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Reset of all peripherals */
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
  92              		.loc 1 193 0
  93 0004 094B     		ldr	r3, .L7
  94 0006 4FF0FF32 		mov	r2, #-1
  95 000a DA60     		str	r2, [r3, #12]
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  96              		.loc 1 194 0
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 6


  97 000c 074B     		ldr	r3, .L7
  98 000e 0022     		movs	r2, #0
  99 0010 1A61     		str	r2, [r3, #16]
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
 100              		.loc 1 196 0
 101 0012 064B     		ldr	r3, .L7
 102 0014 4FF0FF32 		mov	r2, #-1
 103 0018 DA60     		str	r2, [r3, #12]
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
 104              		.loc 1 197 0
 105 001a 044B     		ldr	r3, .L7
 106 001c 0022     		movs	r2, #0
 107 001e DA60     		str	r2, [r3, #12]
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_AHB_FORCE_RESET();
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_AHB_RELEASE_RESET();
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #endif
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* De-Init the low level hardware */
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_MspDeInit();
 108              		.loc 1 205 0
 109 0020 FFF7FEFF 		bl	HAL_MspDeInit
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Return function status */
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return HAL_OK;
 110              		.loc 1 208 0
 111 0024 0023     		movs	r3, #0
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 112              		.loc 1 209 0
 113 0026 1846     		mov	r0, r3
 114 0028 80BD     		pop	{r7, pc}
 115              	.L8:
 116 002a 00BF     		.align	2
 117              	.L7:
 118 002c 00100240 		.word	1073876992
 119              		.cfi_endproc
 120              	.LFE65:
 122              		.section	.text.HAL_MspInit,"ax",%progbits
 123              		.align	2
 124              		.weak	HAL_MspInit
 125              		.thumb
 126              		.thumb_func
 128              	HAL_MspInit:
 129              	.LFB66:
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Initializes the MSP.
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_MspInit(void)
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 130              		.loc 1 216 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 7


 134              		@ link register save eliminated.
 135 0000 80B4     		push	{r7}
 136              	.LCFI4:
 137              		.cfi_def_cfa_offset 4
 138              		.cfi_offset 7, -4
 139 0002 00AF     		add	r7, sp, #0
 140              	.LCFI5:
 141              		.cfi_def_cfa_register 7
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    */
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 142              		.loc 1 220 0
 143 0004 00BF     		nop
 144 0006 BD46     		mov	sp, r7
 145              	.LCFI6:
 146              		.cfi_def_cfa_register 13
 147              		@ sp needed
 148 0008 80BC     		pop	{r7}
 149              	.LCFI7:
 150              		.cfi_restore 7
 151              		.cfi_def_cfa_offset 0
 152 000a 7047     		bx	lr
 153              		.cfi_endproc
 154              	.LFE66:
 156              		.section	.text.HAL_MspDeInit,"ax",%progbits
 157              		.align	2
 158              		.weak	HAL_MspDeInit
 159              		.thumb
 160              		.thumb_func
 162              	HAL_MspDeInit:
 163              	.LFB67:
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  DeInitializes the MSP.
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_MspDeInit(void)
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 164              		.loc 1 227 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169 0000 80B4     		push	{r7}
 170              	.LCFI8:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 7, -4
 173 0002 00AF     		add	r7, sp, #0
 174              	.LCFI9:
 175              		.cfi_def_cfa_register 7
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    */
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 176              		.loc 1 231 0
 177 0004 00BF     		nop
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 8


 178 0006 BD46     		mov	sp, r7
 179              	.LCFI10:
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0008 80BC     		pop	{r7}
 183              	.LCFI11:
 184              		.cfi_restore 7
 185              		.cfi_def_cfa_offset 0
 186 000a 7047     		bx	lr
 187              		.cfi_endproc
 188              	.LFE67:
 190              		.section	.text.HAL_InitTick,"ax",%progbits
 191              		.align	2
 192              		.weak	HAL_InitTick
 193              		.thumb
 194              		.thumb_func
 196              	HAL_InitTick:
 197              	.LFB68:
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function configures the source of the time base. 
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated 
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        Tick interrupt priority.
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). 
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base. 
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       It is used to generate interrupts at regular time intervals. 
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower) 
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       The function is declared as __Weak  to be overwritten  in case of other
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementation  in user file.
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @param TickPriority: Tick interrupt priority.
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval HAL status
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 198              		.loc 1 250 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 8
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 80B5     		push	{r7, lr}
 203              	.LCFI12:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 7, -8
 206              		.cfi_offset 14, -4
 207 0002 82B0     		sub	sp, sp, #8
 208              	.LCFI13:
 209              		.cfi_def_cfa_offset 16
 210 0004 00AF     		add	r7, sp, #0
 211              	.LCFI14:
 212              		.cfi_def_cfa_register 7
 213 0006 7860     		str	r0, [r7, #4]
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 214              		.loc 1 252 0
 215 0008 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 9


 216 000c 0246     		mov	r2, r0
 217 000e 094B     		ldr	r3, .L13
 218 0010 A3FB0223 		umull	r2, r3, r3, r2
 219 0014 9B09     		lsrs	r3, r3, #6
 220 0016 1846     		mov	r0, r3
 221 0018 FFF7FEFF 		bl	HAL_SYSTICK_Config
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /*Configure the SysTick IRQ priority */
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 222              		.loc 1 255 0
 223 001c 0022     		movs	r2, #0
 224 001e 7968     		ldr	r1, [r7, #4]
 225 0020 4FF0FF30 		mov	r0, #-1
 226 0024 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    /* Return function status */
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return HAL_OK;
 227              		.loc 1 258 0
 228 0028 0023     		movs	r3, #0
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 229              		.loc 1 259 0
 230 002a 1846     		mov	r0, r3
 231 002c 0837     		adds	r7, r7, #8
 232              	.LCFI15:
 233              		.cfi_def_cfa_offset 8
 234 002e BD46     		mov	sp, r7
 235              	.LCFI16:
 236              		.cfi_def_cfa_register 13
 237              		@ sp needed
 238 0030 80BD     		pop	{r7, pc}
 239              	.L14:
 240 0032 00BF     		.align	2
 241              	.L13:
 242 0034 D34D6210 		.word	274877907
 243              		.cfi_endproc
 244              	.LFE68:
 246              		.section	.text.HAL_IncTick,"ax",%progbits
 247              		.align	2
 248              		.weak	HAL_IncTick
 249              		.thumb
 250              		.thumb_func
 252              	HAL_IncTick:
 253              	.LFB69:
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @}
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  *  @brief    HAL Control functions
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  *
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** @verbatim
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  ===============================================================================
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                       ##### HAL Control functions #####
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  ===============================================================================
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     [..]  This section provides functions allowing to:
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Provide a tick value in millisecond
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 10


 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Provide a blocking delay in millisecond
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Suspend the time base source interrupt
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Resume the time base source interrupt
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Get the HAL API driver version
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Get the device identifier
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Get the device revision identifier
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during Sleep mode
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** @endverbatim
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        used as application time base.
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       in Systick ISR.
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other 
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      implementations in user file.
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_IncTick(void)
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 254              		.loc 1 298 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258              		@ link register save eliminated.
 259 0000 80B4     		push	{r7}
 260              	.LCFI17:
 261              		.cfi_def_cfa_offset 4
 262              		.cfi_offset 7, -4
 263 0002 00AF     		add	r7, sp, #0
 264              	.LCFI18:
 265              		.cfi_def_cfa_register 7
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   uwTick++;
 266              		.loc 1 299 0
 267 0004 044B     		ldr	r3, .L16
 268 0006 1B68     		ldr	r3, [r3]
 269 0008 0133     		adds	r3, r3, #1
 270 000a 034A     		ldr	r2, .L16
 271 000c 1360     		str	r3, [r2]
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 272              		.loc 1 300 0
 273 000e 00BF     		nop
 274 0010 BD46     		mov	sp, r7
 275              	.LCFI19:
 276              		.cfi_def_cfa_register 13
 277              		@ sp needed
 278 0012 80BC     		pop	{r7}
 279              	.LCFI20:
 280              		.cfi_restore 7
 281              		.cfi_def_cfa_offset 0
 282 0014 7047     		bx	lr
 283              	.L17:
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 11


 284 0016 00BF     		.align	2
 285              	.L16:
 286 0018 00000000 		.word	uwTick
 287              		.cfi_endproc
 288              	.LFE69:
 290              		.section	.text.HAL_GetTick,"ax",%progbits
 291              		.align	2
 292              		.weak	HAL_GetTick
 293              		.thumb
 294              		.thumb_func
 296              	HAL_GetTick:
 297              	.LFB70:
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief Provides a tick value in millisecond.
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note   This function is declared as __weak  to be overwritten  in case of other 
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementations in user file.
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval tick value
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 298              		.loc 1 309 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303 0000 80B4     		push	{r7}
 304              	.LCFI21:
 305              		.cfi_def_cfa_offset 4
 306              		.cfi_offset 7, -4
 307 0002 00AF     		add	r7, sp, #0
 308              	.LCFI22:
 309              		.cfi_def_cfa_register 7
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return uwTick;
 310              		.loc 1 310 0
 311 0004 024B     		ldr	r3, .L20
 312 0006 1B68     		ldr	r3, [r3]
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 313              		.loc 1 311 0
 314 0008 1846     		mov	r0, r3
 315 000a BD46     		mov	sp, r7
 316              	.LCFI23:
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 000c 80BC     		pop	{r7}
 320              	.LCFI24:
 321              		.cfi_restore 7
 322              		.cfi_def_cfa_offset 0
 323 000e 7047     		bx	lr
 324              	.L21:
 325              		.align	2
 326              	.L20:
 327 0010 00000000 		.word	uwTick
 328              		.cfi_endproc
 329              	.LFE70:
 331              		.section	.text.HAL_Delay,"ax",%progbits
 332              		.align	2
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 12


 333              		.weak	HAL_Delay
 334              		.thumb
 335              		.thumb_func
 337              	HAL_Delay:
 338              	.LFB71:
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function provides accurate delay (in milliseconds) based 
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        on variable incremented.
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is incremented.
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note ThiS function is declared as __weak to be overwritten in case of other
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementations in user file.
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @param Delay: specifies the delay time length, in milliseconds.
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_Delay(__IO uint32_t Delay)
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 339              		.loc 1 325 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 16
 342              		@ frame_needed = 1, uses_anonymous_args = 0
 343 0000 80B5     		push	{r7, lr}
 344              	.LCFI25:
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 7, -8
 347              		.cfi_offset 14, -4
 348 0002 84B0     		sub	sp, sp, #16
 349              	.LCFI26:
 350              		.cfi_def_cfa_offset 24
 351 0004 00AF     		add	r7, sp, #0
 352              	.LCFI27:
 353              		.cfi_def_cfa_register 7
 354 0006 7860     		str	r0, [r7, #4]
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   uint32_t tickstart = 0;
 355              		.loc 1 326 0
 356 0008 0023     		movs	r3, #0
 357 000a FB60     		str	r3, [r7, #12]
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   tickstart = HAL_GetTick();
 358              		.loc 1 327 0
 359 000c FFF7FEFF 		bl	HAL_GetTick
 360 0010 F860     		str	r0, [r7, #12]
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   while((HAL_GetTick() - tickstart) < Delay)
 361              		.loc 1 328 0
 362 0012 00BF     		nop
 363              	.L23:
 364              		.loc 1 328 0 is_stmt 0 discriminator 1
 365 0014 FFF7FEFF 		bl	HAL_GetTick
 366 0018 0246     		mov	r2, r0
 367 001a FB68     		ldr	r3, [r7, #12]
 368 001c D21A     		subs	r2, r2, r3
 369 001e 7B68     		ldr	r3, [r7, #4]
 370 0020 9A42     		cmp	r2, r3
 371 0022 F7D3     		bcc	.L23
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   {
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   }
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 13


 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 372              		.loc 1 331 0 is_stmt 1
 373 0024 00BF     		nop
 374 0026 1037     		adds	r7, r7, #16
 375              	.LCFI28:
 376              		.cfi_def_cfa_offset 8
 377 0028 BD46     		mov	sp, r7
 378              	.LCFI29:
 379              		.cfi_def_cfa_register 13
 380              		@ sp needed
 381 002a 80BD     		pop	{r7, pc}
 382              		.cfi_endproc
 383              	.LFE71:
 385              		.section	.text.HAL_SuspendTick,"ax",%progbits
 386              		.align	2
 387              		.weak	HAL_SuspendTick
 388              		.thumb
 389              		.thumb_func
 391              	HAL_SuspendTick:
 392              	.LFB72:
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief Suspend Tick increment.
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is called, the the SysTick interrupt will be disabled and so Tick increment 
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is suspended.
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementations in user file.
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_SuspendTick(void)
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 393              		.loc 1 344 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 1, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 398 0000 80B4     		push	{r7}
 399              	.LCFI30:
 400              		.cfi_def_cfa_offset 4
 401              		.cfi_offset 7, -4
 402 0002 00AF     		add	r7, sp, #0
 403              	.LCFI31:
 404              		.cfi_def_cfa_register 7
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Disable SysTick Interrupt */
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 405              		.loc 1 346 0
 406 0004 044A     		ldr	r2, .L25
 407 0006 044B     		ldr	r3, .L25
 408 0008 1B68     		ldr	r3, [r3]
 409 000a 23F00203 		bic	r3, r3, #2
 410 000e 1360     		str	r3, [r2]
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 411              		.loc 1 347 0
 412 0010 00BF     		nop
 413 0012 BD46     		mov	sp, r7
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 14


 414              	.LCFI32:
 415              		.cfi_def_cfa_register 13
 416              		@ sp needed
 417 0014 80BC     		pop	{r7}
 418              	.LCFI33:
 419              		.cfi_restore 7
 420              		.cfi_def_cfa_offset 0
 421 0016 7047     		bx	lr
 422              	.L26:
 423              		.align	2
 424              	.L25:
 425 0018 10E000E0 		.word	-536813552
 426              		.cfi_endproc
 427              	.LFE72:
 429              		.section	.text.HAL_ResumeTick,"ax",%progbits
 430              		.align	2
 431              		.weak	HAL_ResumeTick
 432              		.thumb
 433              		.thumb_func
 435              	HAL_ResumeTick:
 436              	.LFB73:
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief Resume Tick increment.
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is called, the the SysTick interrupt will be enabled and so Tick increment 
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is resumed.
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is declared as __weak  to be overwritten  in case of other
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementations in user file.
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_ResumeTick(void)
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 437              		.loc 1 360 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442 0000 80B4     		push	{r7}
 443              	.LCFI34:
 444              		.cfi_def_cfa_offset 4
 445              		.cfi_offset 7, -4
 446 0002 00AF     		add	r7, sp, #0
 447              	.LCFI35:
 448              		.cfi_def_cfa_register 7
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Enable SysTick Interrupt */
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 449              		.loc 1 362 0
 450 0004 044A     		ldr	r2, .L28
 451 0006 044B     		ldr	r3, .L28
 452 0008 1B68     		ldr	r3, [r3]
 453 000a 43F00203 		orr	r3, r3, #2
 454 000e 1360     		str	r3, [r2]
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 455              		.loc 1 363 0
 456 0010 00BF     		nop
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 15


 457 0012 BD46     		mov	sp, r7
 458              	.LCFI36:
 459              		.cfi_def_cfa_register 13
 460              		@ sp needed
 461 0014 80BC     		pop	{r7}
 462              	.LCFI37:
 463              		.cfi_restore 7
 464              		.cfi_def_cfa_offset 0
 465 0016 7047     		bx	lr
 466              	.L29:
 467              		.align	2
 468              	.L28:
 469 0018 10E000E0 		.word	-536813552
 470              		.cfi_endproc
 471              	.LFE73:
 473              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 474              		.align	2
 475              		.global	HAL_GetHalVersion
 476              		.thumb
 477              		.thumb_func
 479              	HAL_GetHalVersion:
 480              	.LFB74:
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  This method returns the HAL revision
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval version: 0xXYZR (8bits for each decimal, R for RC)
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 481              		.loc 1 370 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485              		@ link register save eliminated.
 486 0000 80B4     		push	{r7}
 487              	.LCFI38:
 488              		.cfi_def_cfa_offset 4
 489              		.cfi_offset 7, -4
 490 0002 00AF     		add	r7, sp, #0
 491              	.LCFI39:
 492              		.cfi_def_cfa_register 7
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  return __STM32F1xx_HAL_VERSION;
 493              		.loc 1 371 0
 494 0004 024B     		ldr	r3, .L32
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 495              		.loc 1 372 0
 496 0006 1846     		mov	r0, r3
 497 0008 BD46     		mov	sp, r7
 498              	.LCFI40:
 499              		.cfi_def_cfa_register 13
 500              		@ sp needed
 501 000a 80BC     		pop	{r7}
 502              	.LCFI41:
 503              		.cfi_restore 7
 504              		.cfi_def_cfa_offset 0
 505 000c 7047     		bx	lr
 506              	.L33:
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 16


 507 000e 00BF     		.align	2
 508              	.L32:
 509 0010 00040001 		.word	16778240
 510              		.cfi_endproc
 511              	.LFE74:
 513              		.section	.text.HAL_GetREVID,"ax",%progbits
 514              		.align	2
 515              		.global	HAL_GetREVID
 516              		.thumb
 517              		.thumb_func
 519              	HAL_GetREVID:
 520              	.LFB75:
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief Returns the device revision identifier.
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval Device revision identifier
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** uint32_t HAL_GetREVID(void)
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 521              		.loc 1 386 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 8
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 526 0000 80B4     		push	{r7}
 527              	.LCFI42:
 528              		.cfi_def_cfa_offset 4
 529              		.cfi_offset 7, -4
 530 0002 83B0     		sub	sp, sp, #12
 531              	.LCFI43:
 532              		.cfi_def_cfa_offset 16
 533 0004 00AF     		add	r7, sp, #0
 534              	.LCFI44:
 535              		.cfi_def_cfa_register 7
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return((DBGMCU->IDCODE) >> POSITION_VAL(DBGMCU_IDCODE_REV_ID));
 536              		.loc 1 387 0
 537 0006 094B     		ldr	r3, .L37
 538 0008 1A68     		ldr	r2, [r3]
 539 000a 094B     		ldr	r3, .L37+4
 540 000c 7B60     		str	r3, [r7, #4]
 541              	.LBB4:
 542              	.LBB5:
 543              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 17


   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 18


  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 19


 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 20


 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 21


 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 22


 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 23


 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 24


 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 25


 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 26


 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 544              		.loc 2 531 0
 545 000e 7B68     		ldr	r3, [r7, #4]
 546              		.syntax unified
 547              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 548 0010 93FAA3F3 		rbit r3, r3
 549              	@ 0 "" 2
 550              		.thumb
 551              		.syntax unified
 552 0014 3B60     		str	r3, [r7]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 553              		.loc 2 544 0
 554 0016 3B68     		ldr	r3, [r7]
 555              	.LBE5:
 556              	.LBE4:
 557              		.loc 1 387 0
 558 0018 B3FA83F3 		clz	r3, r3
 559 001c 22FA03F3 		lsr	r3, r2, r3
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 560              		.loc 1 388 0
 561 0020 1846     		mov	r0, r3
 562 0022 0C37     		adds	r7, r7, #12
 563              	.LCFI45:
 564              		.cfi_def_cfa_offset 4
 565 0024 BD46     		mov	sp, r7
 566              	.LCFI46:
 567              		.cfi_def_cfa_register 13
 568              		@ sp needed
 569 0026 80BC     		pop	{r7}
 570              	.LCFI47:
 571              		.cfi_restore 7
 572              		.cfi_def_cfa_offset 0
 573 0028 7047     		bx	lr
 574              	.L38:
 575 002a 00BF     		.align	2
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 27


 576              	.L37:
 577 002c 002004E0 		.word	-536600576
 578 0030 0000FFFF 		.word	-65536
 579              		.cfi_endproc
 580              	.LFE75:
 582              		.section	.text.HAL_GetDEVID,"ax",%progbits
 583              		.align	2
 584              		.global	HAL_GetDEVID
 585              		.thumb
 586              		.thumb_func
 588              	HAL_GetDEVID:
 589              	.LFB76:
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Returns the device identifier.
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval Device identifier
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** uint32_t HAL_GetDEVID(void)
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 590              		.loc 1 402 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595 0000 80B4     		push	{r7}
 596              	.LCFI48:
 597              		.cfi_def_cfa_offset 4
 598              		.cfi_offset 7, -4
 599 0002 00AF     		add	r7, sp, #0
 600              	.LCFI49:
 601              		.cfi_def_cfa_register 7
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 602              		.loc 1 403 0
 603 0004 034B     		ldr	r3, .L41
 604 0006 1B68     		ldr	r3, [r3]
 605 0008 C3F30B03 		ubfx	r3, r3, #0, #12
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 606              		.loc 1 404 0
 607 000c 1846     		mov	r0, r3
 608 000e BD46     		mov	sp, r7
 609              	.LCFI50:
 610              		.cfi_def_cfa_register 13
 611              		@ sp needed
 612 0010 80BC     		pop	{r7}
 613              	.LCFI51:
 614              		.cfi_restore 7
 615              		.cfi_def_cfa_offset 0
 616 0012 7047     		bx	lr
 617              	.L42:
 618              		.align	2
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 28


 619              	.L41:
 620 0014 002004E0 		.word	-536600576
 621              		.cfi_endproc
 622              	.LFE76:
 624              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
 625              		.align	2
 626              		.global	HAL_DBGMCU_EnableDBGSleepMode
 627              		.thumb
 628              		.thumb_func
 630              	HAL_DBGMCU_EnableDBGSleepMode:
 631              	.LFB77:
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during SLEEP mode
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGSleepMode(void)
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 632              		.loc 1 411 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 1, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637 0000 80B4     		push	{r7}
 638              	.LCFI52:
 639              		.cfi_def_cfa_offset 4
 640              		.cfi_offset 7, -4
 641 0002 00AF     		add	r7, sp, #0
 642              	.LCFI53:
 643              		.cfi_def_cfa_register 7
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 644              		.loc 1 412 0
 645 0004 044A     		ldr	r2, .L44
 646 0006 044B     		ldr	r3, .L44
 647 0008 5B68     		ldr	r3, [r3, #4]
 648 000a 43F00103 		orr	r3, r3, #1
 649 000e 5360     		str	r3, [r2, #4]
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 650              		.loc 1 413 0
 651 0010 00BF     		nop
 652 0012 BD46     		mov	sp, r7
 653              	.LCFI54:
 654              		.cfi_def_cfa_register 13
 655              		@ sp needed
 656 0014 80BC     		pop	{r7}
 657              	.LCFI55:
 658              		.cfi_restore 7
 659              		.cfi_def_cfa_offset 0
 660 0016 7047     		bx	lr
 661              	.L45:
 662              		.align	2
 663              	.L44:
 664 0018 002004E0 		.word	-536600576
 665              		.cfi_endproc
 666              	.LFE77:
 668              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 669              		.align	2
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 29


 670              		.global	HAL_DBGMCU_DisableDBGSleepMode
 671              		.thumb
 672              		.thumb_func
 674              	HAL_DBGMCU_DisableDBGSleepMode:
 675              	.LFB78:
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during SLEEP mode
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGSleepMode(void)
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 676              		.loc 1 427 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 0
 679              		@ frame_needed = 1, uses_anonymous_args = 0
 680              		@ link register save eliminated.
 681 0000 80B4     		push	{r7}
 682              	.LCFI56:
 683              		.cfi_def_cfa_offset 4
 684              		.cfi_offset 7, -4
 685 0002 00AF     		add	r7, sp, #0
 686              	.LCFI57:
 687              		.cfi_def_cfa_register 7
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 688              		.loc 1 428 0
 689 0004 044A     		ldr	r2, .L47
 690 0006 044B     		ldr	r3, .L47
 691 0008 5B68     		ldr	r3, [r3, #4]
 692 000a 23F00103 		bic	r3, r3, #1
 693 000e 5360     		str	r3, [r2, #4]
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 694              		.loc 1 429 0
 695 0010 00BF     		nop
 696 0012 BD46     		mov	sp, r7
 697              	.LCFI58:
 698              		.cfi_def_cfa_register 13
 699              		@ sp needed
 700 0014 80BC     		pop	{r7}
 701              	.LCFI59:
 702              		.cfi_restore 7
 703              		.cfi_def_cfa_offset 0
 704 0016 7047     		bx	lr
 705              	.L48:
 706              		.align	2
 707              	.L47:
 708 0018 002004E0 		.word	-536600576
 709              		.cfi_endproc
 710              	.LFE78:
 712              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 30


 713              		.align	2
 714              		.global	HAL_DBGMCU_EnableDBGStopMode
 715              		.thumb
 716              		.thumb_func
 718              	HAL_DBGMCU_EnableDBGStopMode:
 719              	.LFB79:
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during STOP mode
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On all STM32F1 devices:
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       If the system tick timer interrupt is enabled during the Stop mode 
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       the system from Stop mode.
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Workaround: To debug the Stop mode, disable the system tick timer 
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       interrupt.
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On all STM32F1 devices:
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       If the system tick timer interrupt is enabled during the Stop mode  
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       the system from Stop mode.
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Workaround: To debug the Stop mode, disable the system tick timer
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       interrupt.
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGStopMode(void)
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 720              		.loc 1 457 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 1, uses_anonymous_args = 0
 724              		@ link register save eliminated.
 725 0000 80B4     		push	{r7}
 726              	.LCFI60:
 727              		.cfi_def_cfa_offset 4
 728              		.cfi_offset 7, -4
 729 0002 00AF     		add	r7, sp, #0
 730              	.LCFI61:
 731              		.cfi_def_cfa_register 7
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 732              		.loc 1 458 0
 733 0004 044A     		ldr	r2, .L50
 734 0006 044B     		ldr	r3, .L50
 735 0008 5B68     		ldr	r3, [r3, #4]
 736 000a 43F00203 		orr	r3, r3, #2
 737 000e 5360     		str	r3, [r2, #4]
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 738              		.loc 1 459 0
 739 0010 00BF     		nop
 740 0012 BD46     		mov	sp, r7
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 31


 741              	.LCFI62:
 742              		.cfi_def_cfa_register 13
 743              		@ sp needed
 744 0014 80BC     		pop	{r7}
 745              	.LCFI63:
 746              		.cfi_restore 7
 747              		.cfi_def_cfa_offset 0
 748 0016 7047     		bx	lr
 749              	.L51:
 750              		.align	2
 751              	.L50:
 752 0018 002004E0 		.word	-536600576
 753              		.cfi_endproc
 754              	.LFE79:
 756              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 757              		.align	2
 758              		.global	HAL_DBGMCU_DisableDBGStopMode
 759              		.thumb
 760              		.thumb_func
 762              	HAL_DBGMCU_DisableDBGStopMode:
 763              	.LFB80:
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during STOP mode
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGStopMode(void)
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 764              		.loc 1 473 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 1, uses_anonymous_args = 0
 768              		@ link register save eliminated.
 769 0000 80B4     		push	{r7}
 770              	.LCFI64:
 771              		.cfi_def_cfa_offset 4
 772              		.cfi_offset 7, -4
 773 0002 00AF     		add	r7, sp, #0
 774              	.LCFI65:
 775              		.cfi_def_cfa_register 7
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 776              		.loc 1 474 0
 777 0004 044A     		ldr	r2, .L53
 778 0006 044B     		ldr	r3, .L53
 779 0008 5B68     		ldr	r3, [r3, #4]
 780 000a 23F00203 		bic	r3, r3, #2
 781 000e 5360     		str	r3, [r2, #4]
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 782              		.loc 1 475 0
 783 0010 00BF     		nop
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 32


 784 0012 BD46     		mov	sp, r7
 785              	.LCFI66:
 786              		.cfi_def_cfa_register 13
 787              		@ sp needed
 788 0014 80BC     		pop	{r7}
 789              	.LCFI67:
 790              		.cfi_restore 7
 791              		.cfi_def_cfa_offset 0
 792 0016 7047     		bx	lr
 793              	.L54:
 794              		.align	2
 795              	.L53:
 796 0018 002004E0 		.word	-536600576
 797              		.cfi_endproc
 798              	.LFE80:
 800              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 801              		.align	2
 802              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 803              		.thumb
 804              		.thumb_func
 806              	HAL_DBGMCU_EnableDBGStandbyMode:
 807              	.LFB81:
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during STANDBY mode
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGStandbyMode(void)
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 808              		.loc 1 489 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 1, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 813 0000 80B4     		push	{r7}
 814              	.LCFI68:
 815              		.cfi_def_cfa_offset 4
 816              		.cfi_offset 7, -4
 817 0002 00AF     		add	r7, sp, #0
 818              	.LCFI69:
 819              		.cfi_def_cfa_register 7
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 820              		.loc 1 490 0
 821 0004 044A     		ldr	r2, .L56
 822 0006 044B     		ldr	r3, .L56
 823 0008 5B68     		ldr	r3, [r3, #4]
 824 000a 43F00403 		orr	r3, r3, #4
 825 000e 5360     		str	r3, [r2, #4]
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 826              		.loc 1 491 0
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 33


 827 0010 00BF     		nop
 828 0012 BD46     		mov	sp, r7
 829              	.LCFI70:
 830              		.cfi_def_cfa_register 13
 831              		@ sp needed
 832 0014 80BC     		pop	{r7}
 833              	.LCFI71:
 834              		.cfi_restore 7
 835              		.cfi_def_cfa_offset 0
 836 0016 7047     		bx	lr
 837              	.L57:
 838              		.align	2
 839              	.L56:
 840 0018 002004E0 		.word	-536600576
 841              		.cfi_endproc
 842              	.LFE81:
 844              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 845              		.align	2
 846              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 847              		.thumb
 848              		.thumb_func
 850              	HAL_DBGMCU_DisableDBGStandbyMode:
 851              	.LFB82:
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during STANDBY mode
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGStandbyMode(void)
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 852              		.loc 1 505 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 857 0000 80B4     		push	{r7}
 858              	.LCFI72:
 859              		.cfi_def_cfa_offset 4
 860              		.cfi_offset 7, -4
 861 0002 00AF     		add	r7, sp, #0
 862              	.LCFI73:
 863              		.cfi_def_cfa_register 7
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 864              		.loc 1 506 0
 865 0004 044A     		ldr	r2, .L59
 866 0006 044B     		ldr	r3, .L59
 867 0008 5B68     		ldr	r3, [r3, #4]
 868 000a 23F00403 		bic	r3, r3, #4
 869 000e 5360     		str	r3, [r2, #4]
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 34


 870              		.loc 1 507 0
 871 0010 00BF     		nop
 872 0012 BD46     		mov	sp, r7
 873              	.LCFI74:
 874              		.cfi_def_cfa_register 13
 875              		@ sp needed
 876 0014 80BC     		pop	{r7}
 877              	.LCFI75:
 878              		.cfi_restore 7
 879              		.cfi_def_cfa_offset 0
 880 0016 7047     		bx	lr
 881              	.L60:
 882              		.align	2
 883              	.L59:
 884 0018 002004E0 		.word	-536600576
 885              		.cfi_endproc
 886              	.LFE82:
 888              		.text
 889              	.Letext0:
 890              		.file 3 "/usr/local/gcc_arm/gcc-arm-none-eabi-5_4-2016q2/arm-none-eabi/include/machine/_default_ty
 891              		.file 4 "/usr/local/gcc_arm/gcc-arm-none-eabi-5_4-2016q2/arm-none-eabi/include/sys/_stdint.h"
 892              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 893              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 894              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal.c
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:20     .bss.uwTick:0000000000000000 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:23     .bss.uwTick:0000000000000000 uwTick
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:26     .text.HAL_Init:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:31     .text.HAL_Init:0000000000000000 HAL_Init
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:196    .text.HAL_InitTick:0000000000000000 HAL_InitTick
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:128    .text.HAL_MspInit:0000000000000000 HAL_MspInit
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:68     .text.HAL_Init:0000000000000028 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:73     .text.HAL_DeInit:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:78     .text.HAL_DeInit:0000000000000000 HAL_DeInit
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:162    .text.HAL_MspDeInit:0000000000000000 HAL_MspDeInit
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:118    .text.HAL_DeInit:000000000000002c $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:123    .text.HAL_MspInit:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:157    .text.HAL_MspDeInit:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:191    .text.HAL_InitTick:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:242    .text.HAL_InitTick:0000000000000034 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:247    .text.HAL_IncTick:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:252    .text.HAL_IncTick:0000000000000000 HAL_IncTick
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:286    .text.HAL_IncTick:0000000000000018 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:291    .text.HAL_GetTick:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:296    .text.HAL_GetTick:0000000000000000 HAL_GetTick
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:327    .text.HAL_GetTick:0000000000000010 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:332    .text.HAL_Delay:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:337    .text.HAL_Delay:0000000000000000 HAL_Delay
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:386    .text.HAL_SuspendTick:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:391    .text.HAL_SuspendTick:0000000000000000 HAL_SuspendTick
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:425    .text.HAL_SuspendTick:0000000000000018 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:430    .text.HAL_ResumeTick:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:435    .text.HAL_ResumeTick:0000000000000000 HAL_ResumeTick
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:469    .text.HAL_ResumeTick:0000000000000018 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:474    .text.HAL_GetHalVersion:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:479    .text.HAL_GetHalVersion:0000000000000000 HAL_GetHalVersion
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:509    .text.HAL_GetHalVersion:0000000000000010 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:514    .text.HAL_GetREVID:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:519    .text.HAL_GetREVID:0000000000000000 HAL_GetREVID
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:577    .text.HAL_GetREVID:000000000000002c $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:583    .text.HAL_GetDEVID:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:588    .text.HAL_GetDEVID:0000000000000000 HAL_GetDEVID
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:620    .text.HAL_GetDEVID:0000000000000014 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:625    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:630    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 HAL_DBGMCU_EnableDBGSleepMode
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:664    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000018 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:669    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:674    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 HAL_DBGMCU_DisableDBGSleepMode
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:708    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000018 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:713    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:718    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 HAL_DBGMCU_EnableDBGStopMode
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:752    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000018 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:757    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:762    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 HAL_DBGMCU_DisableDBGStopMode
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:796    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000018 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:801    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:806    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 HAL_DBGMCU_EnableDBGStandbyMode
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:840    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000018 $d
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:845    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 $t
/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:850    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 HAL_DBGMCU_DisableDBGStandbyMode
ARM GAS  /var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s 			page 36


/var/folders/kh/x4vltyy52lbg7p4pcyglc5080000gp/T//ccXUCU9h.s:884    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriorityGrouping
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
